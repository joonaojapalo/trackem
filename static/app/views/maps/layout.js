// Generated by CoffeeScript 1.10.0
(function() {
  define(["jquery", "radio", "underscore", "marionette", "text!templates/maps/layout", "app/state", "app/views/maps/dropdown", "app/collections/maps", "app/views/maps/edit", "app/views/maps/empty", "widgets/loader"], function($, Radio, _, Marionette, MapsLayoutTemplate, state, Dropdown, Maps, EditMapView, EmptyMapView, LoaderView) {
    var MapsLayout, mapsChannel;
    mapsChannel = Radio.channel("maps");
    return MapsLayout = Marionette.LayoutView.extend({
      template: MapsLayoutTemplate,
      regions: {
        mapsRegion: '[data-region="maps"]',
        editMapRegion: '[data-region="edit-map"]'
      },
      ui: {
        create: '[data-action="create"]',
        inputNewMapName: '[name="new-map-name"]'
      },
      events: {
        "click @ui.create": "onCreateClick"
      },
      initialize: function(options) {
        var _this, ref;
        _.bindAll(this, "onSelect");
        this.state = new Backbone.Model({
          mapId: (ref = options.mapId) != null ? ref : null
        });
        this.maps = new Maps([], {
          group: state.get("group")
        });
        _this = this;
        return mapsChannel.on("delete", function() {
          return _this.editMapRegion.show(new EmptyMapView);
        });
      },
      onDestroy: function() {
        mapsChannel.off("delete");
        return mapsChannel.off("map:select");
      },
      onBeforeShow: function() {
        var _this;
        mapsChannel.on("map:select", this.onSelect);
        _this = this;
        return this.maps.fetch().done(function() {
          return _this.triggerMethod("fetch", _this.maps);
        });
      },
      onFetch: function(maps) {
        var map;
        this.mapsRegion.show(new Dropdown({
          collection: maps
        }));
        map = this.maps.findWhere({
          id: this.state.get("mapId")
        });
        if (!map) {
          return this.editMapRegion.show(new EmptyMapView);
        } else {
          console.log("onfetch", map);
          return this.onSelect(map);
        }
      },
      onSelect: function(map) {
        console.log("map selected: " + (map.get("id")));
        Backbone.history.navigate("maps/" + (map.get('id')));
        return this.editMapRegion.show(new EditMapView({
          model: map
        }));
      },
      onCreateClick: function() {
        var _t, map, newMapName;
        newMapName = this.ui.inputNewMapName.val();
        if (!newMapName) {
          return;
        }
        map = new this.maps.model({
          name: newMapName,
          group: (state.get("group")).get("id")
        });
        _t = this;
        return map.save().done(function() {
          console.log("new map save success");
          _t.maps.add(map);
          return (Radio.channel("maps")).trigger("map:create", map);
        });
      }
    });
  });

}).call(this);
